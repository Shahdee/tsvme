#ifdef CPU_DEVICE
	#define CL_POW pow
#else
	#define CL_POW native_powr
#endif



// начало вспомогательных функций----------------------------------------

// нахождение значени€ воксел€ в объеме
short valexist(float x, float y, float z,global short* volume, int size, float4 boxMinCon, float4 boxMaxCon, short winMin, short winMax, short carve , short interpolation , short  winMin2, short  winMax2)
{

  // если координаты выход€т за область просмотра (бокс), то отсечь их
   
	if(x < boxMinCon.S0+1 ||
       x > boxMaxCon.S0-1 ||
	   y < boxMinCon.S1+1 ||
	   y > boxMaxCon.S1-1 ||
	   z < boxMinCon.S2+1 ||
	   z > boxMaxCon.S2-1 ||
	   x>=size || x<0 ||
	   y>=size || y<0 ||
	   z>=size || z<0 )
	   
		return 0;


	if(interpolation==0)
	{

		// отсекаем ненужные воксели в зависимости от окна просмотра 
		if(carve == 1 && (( volume[((int)x) * size * size + ((int)y) * size + ((int)z)] > winMin && volume[((int)x) * size * size + ((int)y) * size + ((int)z)] < winMax) || (volume[((int)x) * size * size + ((int)y) * size + ((int)z)] > winMin2 && volume[((int)x) * size * size + ((int)y) * size + ((int)z)] < winMax2) ) )
					{
						return 0;
					}
	
		return volume[((int)x) * size * size + ((int)y) * size + ((int)z)];	

	}

	if(interpolation==1)
	{
		float xd = (x-(x-1)) / ((x+1)-(x-1));
		float yd = (y-(y-1)) / ((y+1)-(y-1));
		float zd = (z-(z-1)) / ((z+1)-(z-1));
	
		short C00 = volume[((int)(x-1)) * size * size + ((int)(y-1)) * size + ((int)(z-1))]*(1-xd) + volume[((int)(x+1)) * size * size + ((int)(y-1)) * size + ((int)(z-1))]*xd;
		short C10 = volume[((int)(x-1)) * size * size + ((int)(y+1)) * size + ((int)(z-1))]*(1-xd) + volume[((int)(x+1)) * size * size + ((int)(y+1)) * size + ((int)(z-1))]*xd;
		short C01 = volume[((int)(x-1)) * size * size + ((int)(y-1)) * size + ((int)(z+1))]*(1-xd) + volume[((int)(x+1)) * size * size + ((int)(y-1)) * size + ((int)(z+1))]*xd;
		short C11 = volume[((int)(x-1)) * size * size + ((int)(y+1)) * size + ((int)(z+1))]*(1-xd) + volume[((int)(x+1)) * size * size + ((int)(y+1)) * size + ((int)(z+1))]*xd;

		short C0 = C00*(1-yd) + C10*yd;
		short C1 = C01*(1-yd) + C11*yd;
		short C = C0*(1-zd) + C1*zd;

		if(carve == 1 && ((C > winMin  && C < winMax) || (C > winMin2  && C < winMax2)) )
				{
					return 0;
				}

		return C;


	}
	
}


// вычисл€ет нормаль дл€ воксел€
float4 GetGradient(float4 pos, global short* volume, int size, float4  boxMinCon, float4  boxMaxCon, short  winMin, short  winMax, short  carve, short interpolation, short  winMin2, short  winMax2)
{
	float Gx = valexist(pos.s0 + 1, pos.s1, pos.s2, volume, size, boxMinCon, boxMaxCon, winMin, winMax, carve, interpolation, winMin2, winMax2)
	   - valexist(pos.s0 - 1, pos.s1, pos.s2, volume, size, boxMinCon, boxMaxCon, winMin, winMax, carve, interpolation, winMin2, winMax2);

	float Gy = valexist(pos.s0, pos.s1 + 1, pos.s2, volume, size, boxMinCon, boxMaxCon, winMin, winMax, carve, interpolation, winMin2, winMax2)
	   - valexist(pos.s0, pos.s1 - 1, pos.s2, volume, size, boxMinCon, boxMaxCon, winMin, winMax, carve, interpolation, winMin2, winMax2);

    float Gz = valexist(pos.s0, pos.s1, pos.s2 + 1, volume, size, boxMinCon, boxMaxCon, winMin, winMax, carve, interpolation, winMin2, winMax2)
	   - valexist(pos.s0, pos.s1, pos.s2 - 1, volume, size, boxMinCon, boxMaxCon, winMin, winMax, carve, interpolation, winMin2, winMax2);		  
	
	return fast_normalize((float4)(Gx,Gy,Gz,0.0f));
}

float4  UIntToColor(uint color)
{        
            uchar G;
            uchar B;
            uchar R;
            uchar A;

            uint colorX;
            uint res32;
            uint res24;
            uint res16;

			float4 Col; 

            uint two_in_24_max = (1 << 24) - 1; 
            ushort two_in_16_max = (1 << 16) - 1; 

            if (color > two_in_24_max)
            {
                G = (uchar)(color >> 24); 
                colorX = color >> 24;
                res32 = colorX << 24;
                color -= res32;
            }
            else
            {
                G = 0;
            }
            if (color > two_in_16_max)
            {
                B = (uchar)(color >> 16);
                
                colorX = color >> 16;
                res24 = colorX << 16;
                color -= res24;
            }
            else
            {
                B = 0;
            }
            if (color > 255)
            {
                R = (uchar)(color >> 8);
                
                colorX = color >> 8;
                res16 = colorX << 8;
                color -= res16;
            }
            else
            {
                R = 0;
                A = (uchar)(color);
				Col.S0 = (float)(G/255.0f);
                Col.S1 = (float)(B/255.0f);
                Col.S2 = (float)(R/255.0f);
                Col.S3 = (float)(A/255.0f);
                return Col; 
            }
            A = (uchar)color;
            Col.S0 = (float)(G/255.0f);
            Col.S1 = (float)(B/255.0f);
            Col.S2 = (float)(R/255.0f);
            Col.S3 = (float)(A/255.0f);
            return Col; 
}



float4 GetLightning(
 float4 pos,
 float4 precision,
 float4 normal,
 float4  light,
 global short* volume,
 int size,
 float4 boxMinCon,
 float4 boxMaxCon,
 short  winMin,
 short  winMax,
 short interpolation,
 short tf,
 global uint* colors,
 int knots,
 short  winMin2,
 short  winMax2,
 int winWidth,
 int winCentre,
 float ka,
 float kd,
 float ks,
 float exp,
 float kc,
 float kl,
 float kq,
 global ulong* voxelCounter
 )

{
	short vox_HU = valexist(precision.S0, precision.S1, precision.S2, volume, size, boxMinCon, boxMaxCon, winMin, winMax, 0, interpolation, winMin2, winMax2);
	float4 col;
	uchar ctr=0;
	float factor;
    unsigned short hupix;  
	uchar rgba256=0;
	float4 li;
    float ill;
	float4 reflect; 
	float4 viewpoint = fast_normalize(pos);
	float4 It,Ia,Id,Is;
	int newMax = (winCentre+0.5*winWidth);
	int newMin = (newMax - winWidth);
    newMax-=32768;
	newMin;
	if((vox_HU> winMin && vox_HU < winMax) || (vox_HU> winMin2 && vox_HU < winMax2)) // проверка, попадает ли воксель в окно отсечени€
	{
		col = (float4)(1.0f,0.0f,0.0f,1.0f); // GBRA
	}
	else
	{
		if(tf==0)
		{
			col =(float4)(1.0f,1.0f,1.0f,1.0f); 
		}
		else
		{
			factor = (float)(255.0f/(float)(winWidth));
			hupix = (unsigned short)(vox_HU+32768);
			rgba256 = (uchar)((hupix - newMin) * factor);
			col = (float4)(UIntToColor(colors[rgba256]));
		}
	}

	li = fast_normalize(light-precision); // от текущего воксел€ к источнику света
	ill = dot(li,normal); 
	if(ill>0)
	{
		//float4 light_dist = (light-precision);
		//float dist=sqrt(light_dist.s0*light_dist.s0+light_dist.s1*light_dist.s1+light_dist.s2*light_dist.s2+light_dist.s3*light_dist.s3);
		//float att=(1/(kc+kl*dist+kq*dist*dist));
		//Ia=col*(1.0, 0.0 , 1.0 , 1.0 );  // общий свет   GBRA
		Id=ill*col; // диффузный свет
		//reflect=(2.0*ill*normal-li);
		//reflect=fast_normalize(reflect);
		//Is=CL_POW(dot(viewpoint,reflect),exp)*(0.0,0.0,1.0,1.0); // зеркальное отражение
		//It=ka*Ia+att*(kd*Id+ks*Is); // суммарный свет
		return Id; // 
	}
	return (float4)(0.0f,0.0f,0.0f,1.0f);
}

// пересечение луча с боксом
bool intersect(float4 pos, float4 direction, float4 boxMinCon, float4 boxMaxCon, float* kmin, float* kmax)
{

	float t0 = FLT_MIN;
	float t1 = FLT_MAX;
	float inDirection = 1.0f / direction.S0; // x
	float tmin = (boxMinCon.S0 - pos.S0) * inDirection;
	float tmax =(boxMaxCon.S0 - pos.S0) * inDirection;
	if (tmin > tmax){
		inDirection = tmax;
		tmax = tmin;
		tmin = inDirection;
	}
	t0 = tmin > t0 ? tmin : t0;
	t1 = tmax < t1 ? tmax : t1;
	if (t0 > t1)
		return false;
	inDirection = 1.0f / direction.S1;  // y
	tmin = (boxMinCon.S1 - pos.S1) * inDirection;
	tmax = (boxMaxCon.S1 - pos.S1) * inDirection;
	if (tmin > tmax)
	{
		inDirection = tmax;
		tmax = tmin;
		tmin = inDirection;
	}
	t0 = tmin > t0 ? tmin : t0;
	t1 = tmax < t1 ? tmax : t1;
	if (t0 > t1)
		return false;

	inDirection = 1.0f / direction.S2; // z
	tmin = (boxMinCon.S2 - pos.S2) * inDirection;
	tmax = (boxMaxCon.S2 - pos.S2) * inDirection;
	if (tmin > tmax)
	{
		inDirection = tmax;
		tmax = tmin;
		tmin = inDirection;
	}
	t0 = tmin > t0 ? tmin : t0;
	t1 = tmax < t1 ? tmax : t1;
	if (t0 > t1)
		return false;
	*kmin = t0;
	*kmax = t1;
	return true;
	
}

// пускает луч в наш объем и вычисл€ет значение *интерполируемого* воксел€
float4 TraceRayandGetPixelColor
(
 float4 pos,
 float4 direction, 
 global short* volume,
 int size,
 float4 light,
 float4 boxMinCon, float4 boxMaxCon,
 short  winMin,
 short  winMax,
 short carve,
 short interpolation,
 short tf,
 global uint* colors,
 int knots,
 short  winMin2,
 short  winMax2,
 int winWidth,
 int winCentre,
 float kamb,
 float kdiff,
 float kspec,
 float exp,
 float kc,
 float kl,
 float kq,
 global ulong* voxelCounter
 )
 
{
	float kmin=0;
	float kmax=0;
	// провер€ем, пересекает ли луч наш бокс, если нет, то отсекаем этот случай
	if( !intersect(pos,direction,boxMinCon, boxMaxCon, &kmin,&kmax) )
	{
		return (float4)(0.0f,0.0f,0.0f,1.0f); // bgcolor
	}
	const float step=5;
	const float minst=0.1;
	float4 precision;
	// если луч достигает бокса, то интерполируем значение и вычисл€ем цвет

	for(float k=kmin; k<kmax; k+=step)
	{
		precision=pos+k*direction;

		if(valexist(precision.S0, precision.S1, precision.S2, volume, size, boxMinCon, boxMaxCon, winMin, winMax, carve, interpolation, winMin2, winMax2)!=0)
		{
			//ѕроход луча
			for(float t=k-5; t<kmax; t+=minst)
			{
				precision=pos+t*direction;
				if(valexist(precision.S0,precision.S1,precision.S2, volume, size, boxMinCon, boxMaxCon, winMin, winMax, carve, interpolation, winMin2, winMax2)!=0)
				{
					// поскольку воксель, это тот же пиксель, только в 3D пространстве, у него нет нормали, она замен€етс€ градиентом
					float4 normal = GetGradient(precision, volume, size, boxMinCon, boxMaxCon, winMin, winMax, carve, interpolation, winMin2, winMax2);

					// расчет цвета пиксел€, эмул€ци€ модели освещени€
					float4 truecolor= GetLightning(pos,precision, normal, light, volume, size, boxMinCon, boxMaxCon, winMin, winMax, interpolation, tf, colors, knots, winMin2, winMax2, winWidth, winCentre, kamb, kdiff, kspec, exp, kc, kl, kq, voxelCounter);
					return (float4)(truecolor.s0, truecolor.S1, truecolor.S2, truecolor.S3);
				}
			}
		}
	}
	return (float4)(120.0f,10.0f,0.0f,1.0f);  // GBRA
}



// ¬ычисл€ет направление луча
float4 GetDirection(int w, int h, int x, int y, float4 n, float4 right, float4 up){
	float aspect = (float) h/w; // поправочный коэффициент дл€ проецировани€ 
	float rx = (x-(w/2)) / (2.0f*w)*aspect;
	float ry = (y-(h/2)) / (2.0f*h);
	return fast_normalize( n+(rx*right)+(ry*up) );

}

void AttachPixel(global uchar4* line, size_t x,  uchar g, uchar b, uchar r, uchar a)
{
	global uchar* pix = (global uchar*)(line+x);
	// BGRA
	pix[0] = b; 	
	pix[1] = g;
	pix[2] = r;
	pix[3] = a;	 // прозрачность 
	
}

// конец вспомогательных функций----------------------------------------

// функци€, котора€ будет выполн€тс€ kernel
kernel void DVR(
		    int W,
		    int H,
			global uchar* out,
		    int offset,
		    float4 pos,
		    float4 n, // forward
		    float4 right,
 		    float4 up,
		    global short* volume, 
		    int size,
		    float4 light,
		    float4 boxMinCon,
	 	    float4 boxMaxCon,
		    short winMin,
	 	    short winMax,
		    short carve,
			short interpolation,
			short tf,
			global uint* colors,
			int winWidth,
			int winCentre,
			int knots,
			short winMin2,
	 	    short winMax2,
			global uchar* opacity,
			float kamb,
			float kdiff,
			float kspec,
			float exp,
			float kc,
			float kl,
			float kq,
			global ulong* voxelCounter) 
{
	// берем глобальный идентификатор work_item'a
	size_t x=get_global_id(0);
	size_t y=get_global_id(1);

	// вычисл€ем стрку, в которой будут окрашены пиксели
	global uchar4* line = (global uchar4*)(out+y*offset);

	// вычисл€ем направление луча
	float4 direction = GetDirection(W,H,x,y,n,right,up);

	// пускаем луч
	float4 col = TraceRayandGetPixelColor(pos, direction, volume, size, light, boxMinCon, boxMaxCon, winMin, winMax, carve, interpolation, tf ,colors, knots, winMin2, winMax2, winWidth, winCentre, kamb, kdiff, kspec, exp, kc, kl, kq, voxelCounter);

	// устанавливаем пиксель полученного цвета
	AttachPixel(line, x,  (int)(col.s0 > 1 ? 255 : col.s0 * 255), // G
					      (int)(col.s1 > 1 ? 255 : col.s1 * 255), // B
					      (int)(col.s2 > 1 ? 255 : col.s2 * 255), // R
						  (int)(col.s3 > 1 ? 255 : col.s3 * 255));// A
						  // GBRA - мой формат.   BGRA - Microsoft



}							



